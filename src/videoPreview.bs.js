// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var ReasonApollo = require("reason-apollo/src/ReasonApollo.bs.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Option$ReactTemplate = require("./option.bs.js");

var Graphql_error = Caml_exceptions.create("VideoPreview-ReactTemplate.VideosDetailsQuery.Graphql_error");

var ppx_printed_query = "query VideoDetailsQuery($videoId: String!)  {\nyouTubeVideo(id: $videoId)  {\nid  \nsnippet  {\nuploadChannel  {\nsnippet  {\npublishedAtTs  \ntitle  \n}\n}\ndescription  \n}\nplayer  {\nembedHtml  \n}\n}\n}";

function parse(value) {
  var match = Js_json.decodeObject(value);
  if (match) {
    var match$1 = match[0]["youTubeVideo"];
    var tmp;
    if (match$1 !== undefined) {
      var match$2 = Js_json.decodeNull(match$1);
      if (match$2) {
        tmp = /* None */0;
      } else {
        var match$3 = Js_json.decodeObject(match$1);
        var tmp$1;
        if (match$3) {
          var value$1 = match$3[0];
          var match$4 = value$1["id"];
          var tmp$2;
          if (match$4 !== undefined) {
            var match$5 = Js_json.decodeString(match$4);
            if (match$5) {
              tmp$2 = match$5[0];
            } else {
              throw [
                    Graphql_error,
                    "Expected string, got " + JSON.stringify(match$4)
                  ];
            }
          } else {
            throw [
                  Graphql_error,
                  "Field id on type YoutubeVideo is missing"
                ];
          }
          var match$6 = value$1["snippet"];
          var tmp$3;
          if (match$6 !== undefined) {
            var match$7 = Js_json.decodeObject(match$6);
            if (match$7) {
              var value$2 = match$7[0];
              var match$8 = value$2["uploadChannel"];
              var tmp$4;
              if (match$8 !== undefined) {
                var match$9 = Js_json.decodeObject(match$8);
                if (match$9) {
                  var match$10 = match$9[0]["snippet"];
                  var tmp$5;
                  if (match$10 !== undefined) {
                    var match$11 = Js_json.decodeObject(match$10);
                    if (match$11) {
                      var value$3 = match$11[0];
                      var match$12 = value$3["publishedAtTs"];
                      var tmp$6;
                      if (match$12 !== undefined) {
                        var match$13 = Js_json.decodeString(match$12);
                        if (match$13) {
                          tmp$6 = match$13[0];
                        } else {
                          throw [
                                Graphql_error,
                                "Expected string, got " + JSON.stringify(match$12)
                              ];
                        }
                      } else {
                        throw [
                              Graphql_error,
                              "Field publishedAtTs on type YoutubeChannelSnippet is missing"
                            ];
                      }
                      var match$14 = value$3["title"];
                      var tmp$7;
                      if (match$14 !== undefined) {
                        var match$15 = Js_json.decodeString(match$14);
                        if (match$15) {
                          tmp$7 = match$15[0];
                        } else {
                          throw [
                                Graphql_error,
                                "Expected string, got " + JSON.stringify(match$14)
                              ];
                        }
                      } else {
                        throw [
                              Graphql_error,
                              "Field title on type YoutubeChannelSnippet is missing"
                            ];
                      }
                      tmp$5 = {
                        publishedAtTs: tmp$6,
                        title: tmp$7
                      };
                    } else {
                      throw [
                            Graphql_error,
                            "Object is not a value"
                          ];
                    }
                  } else {
                    throw [
                          Graphql_error,
                          "Field snippet on type YoutubeVideoChannel is missing"
                        ];
                  }
                  tmp$4 = {
                    snippet: tmp$5
                  };
                } else {
                  throw [
                        Graphql_error,
                        "Object is not a value"
                      ];
                }
              } else {
                throw [
                      Graphql_error,
                      "Field uploadChannel on type YoutubeSnippet is missing"
                    ];
              }
              var match$16 = value$2["description"];
              var tmp$8;
              if (match$16 !== undefined) {
                var match$17 = Js_json.decodeString(match$16);
                if (match$17) {
                  tmp$8 = match$17[0];
                } else {
                  throw [
                        Graphql_error,
                        "Expected string, got " + JSON.stringify(match$16)
                      ];
                }
              } else {
                throw [
                      Graphql_error,
                      "Field description on type YoutubeSnippet is missing"
                    ];
              }
              tmp$3 = {
                uploadChannel: tmp$4,
                description: tmp$8
              };
            } else {
              throw [
                    Graphql_error,
                    "Object is not a value"
                  ];
            }
          } else {
            throw [
                  Graphql_error,
                  "Field snippet on type YoutubeVideo is missing"
                ];
          }
          var match$18 = value$1["player"];
          var tmp$9;
          if (match$18 !== undefined) {
            var match$19 = Js_json.decodeNull(match$18);
            if (match$19) {
              tmp$9 = /* None */0;
            } else {
              var match$20 = Js_json.decodeObject(match$18);
              var tmp$10;
              if (match$20) {
                var match$21 = match$20[0]["embedHtml"];
                var tmp$11;
                if (match$21 !== undefined) {
                  var match$22 = Js_json.decodeString(match$21);
                  if (match$22) {
                    tmp$11 = match$22[0];
                  } else {
                    throw [
                          Graphql_error,
                          "Expected string, got " + JSON.stringify(match$21)
                        ];
                  }
                } else {
                  throw [
                        Graphql_error,
                        "Field embedHtml on type YoutubePlayer is missing"
                      ];
                }
                tmp$10 = {
                  embedHtml: tmp$11
                };
              } else {
                throw [
                      Graphql_error,
                      "Object is not a value"
                    ];
              }
              tmp$9 = /* Some */[tmp$10];
            }
          } else {
            tmp$9 = /* None */0;
          }
          tmp$1 = {
            id: tmp$2,
            snippet: tmp$3,
            player: tmp$9
          };
        } else {
          throw [
                Graphql_error,
                "Object is not a value"
              ];
        }
        tmp = /* Some */[tmp$1];
      }
    } else {
      tmp = /* None */0;
    }
    return {
            youTubeVideo: tmp
          };
  } else {
    throw [
          Graphql_error,
          "Object is not a value"
        ];
  }
}

function json_of_optional(encoder, value) {
  if (value) {
    return Curry._1(encoder, value[0]);
  } else {
    return null;
  }
}

function json_of_array(encoder, value) {
  return value.map(Curry.__1(encoder));
}

function json_of_String(value) {
  return value;
}

function make(videoId, _) {
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromList(/* :: */[
                /* tuple */[
                  "videoId",
                  videoId
                ],
                /* [] */0
              ]),
          parse: parse
        };
}

function makeWithVariables(variables) {
  var videoId = variables.videoId;
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromList(/* :: */[
                /* tuple */[
                  "videoId",
                  videoId
                ],
                /* [] */0
              ]),
          parse: parse
        };
}

function ret_type() {
  return /* module */[];
}

var MT_Ret = /* module */[];

var VideosDetailsQuery = /* module */[
  /* Graphql_error */Graphql_error,
  /* ppx_printed_query */ppx_printed_query,
  /* query */ppx_printed_query,
  /* parse */parse,
  /* json_of_optional */json_of_optional,
  /* json_of_array */json_of_array,
  /* json_of_String */json_of_String,
  /* make */make,
  /* makeWithVariables */makeWithVariables,
  /* ret_type */ret_type,
  /* MT_Ret */MT_Ret
];

var component = ReasonReact.statelessComponent("VideoPreview");

var Query = ReasonApollo.CreateQuery([
      ppx_printed_query,
      parse
    ]);

function make$1(videoId, _) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function () {
              var videoQuery = make(videoId, /* () */0);
              return ReasonReact.element(/* None */0, /* None */0, Curry.app(Query[/* make */3], [
                              /* Some */[videoQuery.variables],
                              /* None */0,
                              /* None */0,
                              /* None */0,
                              /* None */0,
                              /* None */0,
                              /* None */0,
                              /* None */0,
                              /* None */0,
                              (function (param) {
                                  var result = param[/* result */0];
                                  if (typeof result === "number") {
                                    return React.createElement("div", undefined, "Loading");
                                  } else if (result.tag) {
                                    var match = result[0].youTubeVideo;
                                    var tmp;
                                    if (match) {
                                      var match$1 = match[0].player;
                                      tmp = React.createElement("div", {
                                            dangerouslySetInnerHTML: {
                                              __html: match$1 ? match$1[0].embedHtml : "<strong>No video player available</strong>"
                                            }
                                          });
                                    } else {
                                      tmp = "No video found for id " + videoId;
                                    }
                                    return React.createElement("div", undefined, tmp);
                                  } else {
                                    return React.createElement("div", undefined, Option$ReactTemplate.$$default("Some error", Js_primitive.undefined_to_opt(JSON.stringify(result[0]))));
                                  }
                                })
                            ]));
            }),
          /* initialState */component[/* initialState */10],
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */component[/* reducer */12],
          /* subscriptions */component[/* subscriptions */13],
          /* jsElementWrapped */component[/* jsElementWrapped */14]
        ];
}

exports.VideosDetailsQuery = VideosDetailsQuery;
exports.component = component;
exports.Query = Query;
exports.make = make$1;
/* component Not a pure module */
