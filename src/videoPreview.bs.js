// Generated by BUCKLESCRIPT VERSION 2.2.0, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Utils$ReactTemplate = require("./utils.bs.js");
var Client$ReactTemplate = require("./client.bs.js");

var Graphql_error = Caml_exceptions.create("VideoPreview-ReactTemplate.VideosDetailsQuery.Graphql_error");

var query = "query VideoDetailsQuery($videoId: String!)  {\nyouTubeVideo(id: $videoId)  {\nid  \nsnippet  {\nuploadChannel  {\nsnippet  {\npublishedAtTs  \ntitle  \n}\n}\ndescription  \n}\nplayer  {\nembedHtml  \n}\n}\n}";

function parse(value) {
  var match = Js_json.decodeObject(value);
  if (match) {
    var value$1 = match[0]["youTubeVideo"];
    var match$1 = Js_json.decodeNull(value$1);
    var tmp;
    if (match$1) {
      tmp = /* None */0;
    } else {
      var match$2 = Js_json.decodeObject(value$1);
      var tmp$1;
      if (match$2) {
        var value$2 = match$2[0];
        var value$3 = value$2["id"];
        var match$3 = Js_json.decodeString(value$3);
        var tmp$2;
        if (match$3) {
          tmp$2 = match$3[0];
        } else {
          throw Graphql_error;
        }
        var value$4 = value$2["snippet"];
        var match$4 = Js_json.decodeObject(value$4);
        var tmp$3;
        if (match$4) {
          var value$5 = match$4[0];
          var value$6 = value$5["uploadChannel"];
          var match$5 = Js_json.decodeObject(value$6);
          var tmp$4;
          if (match$5) {
            var value$7 = match$5[0]["snippet"];
            var match$6 = Js_json.decodeObject(value$7);
            var tmp$5;
            if (match$6) {
              var value$8 = match$6[0];
              var value$9 = value$8["publishedAtTs"];
              var match$7 = Js_json.decodeString(value$9);
              var tmp$6;
              if (match$7) {
                tmp$6 = match$7[0];
              } else {
                throw Graphql_error;
              }
              var value$10 = value$8["title"];
              var match$8 = Js_json.decodeString(value$10);
              var tmp$7;
              if (match$8) {
                tmp$7 = match$8[0];
              } else {
                throw Graphql_error;
              }
              tmp$5 = {
                publishedAtTs: tmp$6,
                title: tmp$7
              };
            } else {
              throw Graphql_error;
            }
            tmp$4 = {
              snippet: tmp$5
            };
          } else {
            throw Graphql_error;
          }
          var value$11 = value$5["description"];
          var match$9 = Js_json.decodeString(value$11);
          var tmp$8;
          if (match$9) {
            tmp$8 = match$9[0];
          } else {
            throw Graphql_error;
          }
          tmp$3 = {
            uploadChannel: tmp$4,
            description: tmp$8
          };
        } else {
          throw Graphql_error;
        }
        var value$12 = value$2["player"];
        var match$10 = Js_json.decodeNull(value$12);
        var tmp$9;
        if (match$10) {
          tmp$9 = /* None */0;
        } else {
          var match$11 = Js_json.decodeObject(value$12);
          var tmp$10;
          if (match$11) {
            var value$13 = match$11[0]["embedHtml"];
            var match$12 = Js_json.decodeString(value$13);
            var tmp$11;
            if (match$12) {
              tmp$11 = match$12[0];
            } else {
              throw Graphql_error;
            }
            tmp$10 = {
              embedHtml: tmp$11
            };
          } else {
            throw Graphql_error;
          }
          tmp$9 = /* Some */[tmp$10];
        }
        tmp$1 = {
          id: tmp$2,
          snippet: tmp$3,
          player: tmp$9
        };
      } else {
        throw Graphql_error;
      }
      tmp = /* Some */[tmp$1];
    }
    return {
            youTubeVideo: tmp
          };
  } else {
    throw Graphql_error;
  }
}

function json_of_optional(encoder, value) {
  if (value) {
    return Curry._1(encoder, value[0]);
  } else {
    return null;
  }
}

function json_of_array(encoder, value) {
  return value.map(Curry.__1(encoder));
}

function json_of_String(value) {
  return value;
}

function make(videoId, _) {
  return {
          query: query,
          variables: Js_dict.fromList(/* :: */[
                /* tuple */[
                  "videoId",
                  videoId
                ],
                /* [] */0
              ]),
          parse: parse
        };
}

function makeWithVariables(variables) {
  var videoId = variables.videoId;
  return {
          query: query,
          variables: Js_dict.fromList(/* :: */[
                /* tuple */[
                  "videoId",
                  videoId
                ],
                /* [] */0
              ]),
          parse: parse
        };
}

function ret_type() {
  return /* module */[];
}

var MT_Ret = /* module */[];

var VideosDetailsQuery = /* module */[
  /* Graphql_error */Graphql_error,
  /* query */query,
  /* parse */parse,
  /* json_of_optional */json_of_optional,
  /* json_of_array */json_of_array,
  /* json_of_String */json_of_String,
  /* make */make,
  /* makeWithVariables */makeWithVariables,
  /* ret_type */ret_type,
  /* MT_Ret */MT_Ret
];

var component = ReasonReact.statelessComponent("VideoPreview");

function make$1(videoId, _) {
  var newrecord = component.slice();
  newrecord[/* render */9] = (function () {
      var videoQuery = make(videoId, /* () */0);
      return ReasonReact.element(/* None */0, /* None */0, Curry._2(Client$ReactTemplate.Instance[/* Query */1][/* make */2], videoQuery, (function (response, parse) {
                        if (typeof response === "number") {
                          return React.createElement("div", undefined, Utils$ReactTemplate.s("Loading"));
                        } else if (response.tag) {
                          return React.createElement("div", undefined, Utils$ReactTemplate.s(response[0]));
                        } else {
                          var result = Curry._1(parse, response[0]);
                          var match = result.youTubeVideo;
                          var tmp;
                          if (match) {
                            var match$1 = match[0].player;
                            tmp = React.createElement("div", {
                                  dangerouslySetInnerHTML: {
                                    __html: match$1 ? match$1[0].embedHtml : "<strong>No video player available</strong>"
                                  }
                                });
                          } else {
                            tmp = Utils$ReactTemplate.s("No video found for id " + videoId);
                          }
                          return React.createElement("div", undefined, tmp);
                        }
                      })));
    });
  return newrecord;
}

var RR = 0;

var Query = 0;

exports.RR = RR;
exports.VideosDetailsQuery = VideosDetailsQuery;
exports.component = component;
exports.Query = Query;
exports.make = make$1;
/* component Not a pure module */
