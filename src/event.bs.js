// Generated by BUCKLESCRIPT VERSION 2.2.0, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var $$String = require("bs-platform/lib/js/string.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Utils$ReactTemplate = require("./utils.bs.js");
var Client$ReactTemplate = require("./client.bs.js");
var Example$ReactTemplate = require("./example.bs.js");

function $$default(value, option) {
  if (option) {
    return option[0];
  } else {
    return value;
  }
}

function presentationToQueryTerm(presentation) {
  var names = $$String.concat(" ", $$Array.to_list($$Array.map((function (speaker) {
                  return $$default("", speaker.name);
                }), presentation.speakers)));
  return names + (" : " + $$default("No title", presentation.draft.title));
}

var Graphql_error = Caml_exceptions.create("Event-ReactTemplate.FindEventPresentationsQuery.Graphql_error");

var query = "query findEventPresentations($id: String!)  {\neventil  {\nevent(id: $id)  {\nid  \npresentations  {\nid  \ndraft  {\ntitle  \n}\nspeakers  {\nname  \n}\nvideo_url  \n}\n}\n}\n}";

function parse(value) {
  var match = Js_json.decodeObject(value);
  if (match) {
    var value$1 = match[0]["eventil"];
    var match$1 = Js_json.decodeNull(value$1);
    var tmp;
    if (match$1) {
      tmp = /* None */0;
    } else {
      var match$2 = Js_json.decodeObject(value$1);
      var tmp$1;
      if (match$2) {
        var value$2 = match$2[0]["event"];
        var match$3 = Js_json.decodeNull(value$2);
        var tmp$2;
        if (match$3) {
          tmp$2 = /* None */0;
        } else {
          var match$4 = Js_json.decodeObject(value$2);
          var tmp$3;
          if (match$4) {
            var value$3 = match$4[0];
            var value$4 = value$3["id"];
            var match$5 = Js_json.decodeNull(value$4);
            var tmp$4;
            if (match$5) {
              tmp$4 = /* None */0;
            } else {
              var match$6 = Js_json.decodeString(value$4);
              var tmp$5;
              if (match$6) {
                tmp$5 = match$6[0];
              } else {
                throw Graphql_error;
              }
              tmp$4 = /* Some */[tmp$5];
            }
            var value$5 = value$3["presentations"];
            var match$7 = Js_json.decodeArray(value$5);
            var tmp$6;
            if (match$7) {
              tmp$6 = match$7[0].map((function (value) {
                      var match = Js_json.decodeObject(value);
                      if (match) {
                        var value$1 = match[0];
                        var value$2 = value$1["id"];
                        var match$1 = Js_json.decodeNull(value$2);
                        var tmp;
                        if (match$1) {
                          tmp = /* None */0;
                        } else {
                          var match$2 = Js_json.decodeString(value$2);
                          var tmp$1;
                          if (match$2) {
                            tmp$1 = match$2[0];
                          } else {
                            throw Graphql_error;
                          }
                          tmp = /* Some */[tmp$1];
                        }
                        var value$3 = value$1["draft"];
                        var match$3 = Js_json.decodeObject(value$3);
                        var tmp$2;
                        if (match$3) {
                          var value$4 = match$3[0]["title"];
                          var match$4 = Js_json.decodeNull(value$4);
                          var tmp$3;
                          if (match$4) {
                            tmp$3 = /* None */0;
                          } else {
                            var match$5 = Js_json.decodeString(value$4);
                            var tmp$4;
                            if (match$5) {
                              tmp$4 = match$5[0];
                            } else {
                              throw Graphql_error;
                            }
                            tmp$3 = /* Some */[tmp$4];
                          }
                          tmp$2 = {
                            title: tmp$3
                          };
                        } else {
                          throw Graphql_error;
                        }
                        var value$5 = value$1["speakers"];
                        var match$6 = Js_json.decodeArray(value$5);
                        var tmp$5;
                        if (match$6) {
                          tmp$5 = match$6[0].map((function (value) {
                                  var match = Js_json.decodeObject(value);
                                  if (match) {
                                    var value$1 = match[0]["name"];
                                    var match$1 = Js_json.decodeNull(value$1);
                                    var tmp;
                                    if (match$1) {
                                      tmp = /* None */0;
                                    } else {
                                      var match$2 = Js_json.decodeString(value$1);
                                      var tmp$1;
                                      if (match$2) {
                                        tmp$1 = match$2[0];
                                      } else {
                                        throw Graphql_error;
                                      }
                                      tmp = /* Some */[tmp$1];
                                    }
                                    return {
                                            name: tmp
                                          };
                                  } else {
                                    throw Graphql_error;
                                  }
                                }));
                        } else {
                          throw Graphql_error;
                        }
                        var value$6 = value$1["video_url"];
                        var match$7 = Js_json.decodeNull(value$6);
                        var tmp$6;
                        if (match$7) {
                          tmp$6 = /* None */0;
                        } else {
                          var match$8 = Js_json.decodeString(value$6);
                          var tmp$7;
                          if (match$8) {
                            tmp$7 = match$8[0];
                          } else {
                            throw Graphql_error;
                          }
                          tmp$6 = /* Some */[tmp$7];
                        }
                        return {
                                id: tmp,
                                draft: tmp$2,
                                speakers: tmp$5,
                                video_url: tmp$6
                              };
                      } else {
                        throw Graphql_error;
                      }
                    }));
            } else {
              throw Graphql_error;
            }
            tmp$3 = {
              id: tmp$4,
              presentations: tmp$6
            };
          } else {
            throw Graphql_error;
          }
          tmp$2 = /* Some */[tmp$3];
        }
        tmp$1 = {
          event: tmp$2
        };
      } else {
        throw Graphql_error;
      }
      tmp = /* Some */[tmp$1];
    }
    return {
            eventil: tmp
          };
  } else {
    throw Graphql_error;
  }
}

function json_of_optional(encoder, value) {
  if (value) {
    return Curry._1(encoder, value[0]);
  } else {
    return null;
  }
}

function json_of_array(encoder, value) {
  return value.map(Curry.__1(encoder));
}

function json_of_String(value) {
  return value;
}

function make(id, _) {
  return {
          query: query,
          variables: Js_dict.fromList(/* :: */[
                /* tuple */[
                  "id",
                  id
                ],
                /* [] */0
              ]),
          parse: parse
        };
}

function makeWithVariables(variables) {
  var id = variables.id;
  return {
          query: query,
          variables: Js_dict.fromList(/* :: */[
                /* tuple */[
                  "id",
                  id
                ],
                /* [] */0
              ]),
          parse: parse
        };
}

function ret_type() {
  return /* module */[];
}

var MT_Ret = /* module */[];

var FindEventPresentationsQuery = /* module */[
  /* Graphql_error */Graphql_error,
  /* query */query,
  /* parse */parse,
  /* json_of_optional */json_of_optional,
  /* json_of_array */json_of_array,
  /* json_of_String */json_of_String,
  /* make */make,
  /* makeWithVariables */makeWithVariables,
  /* ret_type */ret_type,
  /* MT_Ret */MT_Ret
];

var component = ReasonReact.reducerComponent("Event");

function make$1(eventId, _) {
  var newrecord = component.slice();
  newrecord[/* render */9] = (function (self) {
      var videosQuery = make(eventId, /* () */0);
      return ReasonReact.element(/* None */0, /* None */0, Curry._2(Client$ReactTemplate.Instance[/* Query */1][/* make */2], videosQuery, (function (response, parse) {
                        if (typeof response === "number") {
                          return React.createElement("div", undefined, Utils$ReactTemplate.s("Loading"));
                        } else if (response.tag) {
                          return React.createElement("div", undefined, Utils$ReactTemplate.s(response[0]));
                        } else {
                          var result = Curry._1(parse, response[0]);
                          var match = result.eventil;
                          if (match) {
                            var match$1 = match[0].event;
                            if (match$1) {
                              var match$2 = self[/* state */2][/* selectedPresentation */2];
                              var tmp;
                              if (match$2) {
                                var presentation = match$2[0];
                                var term = presentationToQueryTerm(presentation);
                                tmp = ReasonReact.element(/* None */0, /* None */0, Example$ReactTemplate.make(term, Utils$ReactTemplate.getExn("presentationId", presentation.id), /* array */[]));
                              } else {
                                tmp = null;
                              }
                              return React.createElement("div", undefined, React.createElement("ul", undefined, $$Array.map((function (presentation) {
                                                    var names = $$String.concat(" ", $$Array.to_list($$Array.map((function (speaker) {
                                                                    return $$default("", speaker.name);
                                                                  }), presentation.speakers)));
                                                    var match = presentation.video_url;
                                                    return React.createElement("li", {
                                                                onClick: (function () {
                                                                    return Curry._1(self[/* send */4], /* SelectPresentation */[presentation]);
                                                                  })
                                                              }, Utils$ReactTemplate.s((
                                                                    match ? "Y" : "X"
                                                                  ) + (" " + (names + (" : " + $$default("No title", presentation.draft.title))))));
                                                  }), match$1[0].presentations)), React.createElement("hr", undefined), tmp);
                            } else {
                              return Utils$ReactTemplate.s("No event");
                            }
                          } else {
                            return Utils$ReactTemplate.s("No eventil");
                          }
                        }
                      })));
    });
  newrecord[/* initialState */10] = (function () {
      return /* record */[
              /* count */0,
              /* show : false */0,
              /* selectedPresentation : None */0
            ];
    });
  newrecord[/* reducer */12] = (function (action, state) {
      if (typeof action === "number") {
        if (action !== 0) {
          return /* Update */Block.__(0, [/* record */[
                      /* count */state[/* count */0],
                      /* show */1 - state[/* show */1],
                      /* selectedPresentation */state[/* selectedPresentation */2]
                    ]]);
        } else {
          return /* Update */Block.__(0, [/* record */[
                      /* count */state[/* count */0] + 1 | 0,
                      /* show */state[/* show */1],
                      /* selectedPresentation */state[/* selectedPresentation */2]
                    ]]);
        }
      } else {
        return /* Update */Block.__(0, [/* record */[
                    /* count */state[/* count */0],
                    /* show */state[/* show */1],
                    /* selectedPresentation : Some */[action[0]]
                  ]]);
      }
    });
  return newrecord;
}

var Query = 0;

exports.$$default = $$default;
exports.default = $$default;
exports.__esModule = true;
exports.presentationToQueryTerm = presentationToQueryTerm;
exports.FindEventPresentationsQuery = FindEventPresentationsQuery;
exports.component = component;
exports.Query = Query;
exports.make = make$1;
/* component Not a pure module */
