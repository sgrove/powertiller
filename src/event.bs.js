// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var $$String = require("bs-platform/lib/js/string.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var ReasonApollo = require("reason-apollo/src/ReasonApollo.bs.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Utils$ReactTemplate = require("./utils.bs.js");
var Option$ReactTemplate = require("./option.bs.js");
var Example$ReactTemplate = require("./example.bs.js");

function $$default(value, option) {
  if (option) {
    return option[0];
  } else {
    return value;
  }
}

function presentationToQueryTerm(presentation) {
  var names = $$String.concat(" ", $$Array.to_list($$Array.map((function (speaker) {
                  return $$default("", speaker.name);
                }), presentation.speakers)));
  return names + (" : " + $$default("No title", presentation.draft.title));
}

var Graphql_error = Caml_exceptions.create("Event-ReactTemplate.FindEventPresentationsQuery.Graphql_error");

var ppx_printed_query = "query findEventPresentations($id: String!)  {\neventil  {\nevent(id: $id)  {\nid  \npresentations  {\nid  \ndraft  {\ntitle  \n}\nspeakers  {\nname  \n}\nvideo_url  \n}\n}\n}\n}";

function parse(value) {
  var match = Js_json.decodeObject(value);
  if (match) {
    var match$1 = match[0]["eventil"];
    var tmp;
    if (match$1 !== undefined) {
      var match$2 = Js_json.decodeNull(match$1);
      if (match$2) {
        tmp = /* None */0;
      } else {
        var match$3 = Js_json.decodeObject(match$1);
        var tmp$1;
        if (match$3) {
          var match$4 = match$3[0]["event"];
          var tmp$2;
          if (match$4 !== undefined) {
            var match$5 = Js_json.decodeNull(match$4);
            if (match$5) {
              tmp$2 = /* None */0;
            } else {
              var match$6 = Js_json.decodeObject(match$4);
              var tmp$3;
              if (match$6) {
                var value$1 = match$6[0];
                var match$7 = value$1["id"];
                var tmp$4;
                if (match$7 !== undefined) {
                  var match$8 = Js_json.decodeNull(match$7);
                  if (match$8) {
                    tmp$4 = /* None */0;
                  } else {
                    var match$9 = Js_json.decodeString(match$7);
                    var tmp$5;
                    if (match$9) {
                      tmp$5 = match$9[0];
                    } else {
                      throw [
                            Graphql_error,
                            "Expected string, got " + JSON.stringify(match$7)
                          ];
                    }
                    tmp$4 = /* Some */[tmp$5];
                  }
                } else {
                  tmp$4 = /* None */0;
                }
                var match$10 = value$1["presentations"];
                var tmp$6;
                if (match$10 !== undefined) {
                  var match$11 = Js_json.decodeArray(match$10);
                  if (match$11) {
                    tmp$6 = match$11[0].map((function (value) {
                            var match = Js_json.decodeObject(value);
                            if (match) {
                              var value$1 = match[0];
                              var match$1 = value$1["id"];
                              var tmp;
                              if (match$1 !== undefined) {
                                var match$2 = Js_json.decodeNull(match$1);
                                if (match$2) {
                                  tmp = /* None */0;
                                } else {
                                  var match$3 = Js_json.decodeString(match$1);
                                  var tmp$1;
                                  if (match$3) {
                                    tmp$1 = match$3[0];
                                  } else {
                                    throw [
                                          Graphql_error,
                                          "Expected string, got " + JSON.stringify(match$1)
                                        ];
                                  }
                                  tmp = /* Some */[tmp$1];
                                }
                              } else {
                                tmp = /* None */0;
                              }
                              var match$4 = value$1["draft"];
                              var tmp$2;
                              if (match$4 !== undefined) {
                                var match$5 = Js_json.decodeObject(match$4);
                                if (match$5) {
                                  var match$6 = match$5[0]["title"];
                                  var tmp$3;
                                  if (match$6 !== undefined) {
                                    var match$7 = Js_json.decodeNull(match$6);
                                    if (match$7) {
                                      tmp$3 = /* None */0;
                                    } else {
                                      var match$8 = Js_json.decodeString(match$6);
                                      var tmp$4;
                                      if (match$8) {
                                        tmp$4 = match$8[0];
                                      } else {
                                        throw [
                                              Graphql_error,
                                              "Expected string, got " + JSON.stringify(match$6)
                                            ];
                                      }
                                      tmp$3 = /* Some */[tmp$4];
                                    }
                                  } else {
                                    tmp$3 = /* None */0;
                                  }
                                  tmp$2 = {
                                    title: tmp$3
                                  };
                                } else {
                                  throw [
                                        Graphql_error,
                                        "Object is not a value"
                                      ];
                                }
                              } else {
                                throw [
                                      Graphql_error,
                                      "Field draft on type EventilPresentation is missing"
                                    ];
                              }
                              var match$9 = value$1["speakers"];
                              var tmp$5;
                              if (match$9 !== undefined) {
                                var match$10 = Js_json.decodeArray(match$9);
                                if (match$10) {
                                  tmp$5 = match$10[0].map((function (value) {
                                          var match = Js_json.decodeObject(value);
                                          if (match) {
                                            var match$1 = match[0]["name"];
                                            var tmp;
                                            if (match$1 !== undefined) {
                                              var match$2 = Js_json.decodeNull(match$1);
                                              if (match$2) {
                                                tmp = /* None */0;
                                              } else {
                                                var match$3 = Js_json.decodeString(match$1);
                                                var tmp$1;
                                                if (match$3) {
                                                  tmp$1 = match$3[0];
                                                } else {
                                                  throw [
                                                        Graphql_error,
                                                        "Expected string, got " + JSON.stringify(match$1)
                                                      ];
                                                }
                                                tmp = /* Some */[tmp$1];
                                              }
                                            } else {
                                              tmp = /* None */0;
                                            }
                                            return {
                                                    name: tmp
                                                  };
                                          } else {
                                            throw [
                                                  Graphql_error,
                                                  "Object is not a value"
                                                ];
                                          }
                                        }));
                                } else {
                                  throw [
                                        Graphql_error,
                                        "Expected array, got " + JSON.stringify(match$9)
                                      ];
                                }
                              } else {
                                throw [
                                      Graphql_error,
                                      "Field speakers on type EventilPresentation is missing"
                                    ];
                              }
                              var match$11 = value$1["video_url"];
                              var tmp$6;
                              if (match$11 !== undefined) {
                                var match$12 = Js_json.decodeNull(match$11);
                                if (match$12) {
                                  tmp$6 = /* None */0;
                                } else {
                                  var match$13 = Js_json.decodeString(match$11);
                                  var tmp$7;
                                  if (match$13) {
                                    tmp$7 = match$13[0];
                                  } else {
                                    throw [
                                          Graphql_error,
                                          "Expected string, got " + JSON.stringify(match$11)
                                        ];
                                  }
                                  tmp$6 = /* Some */[tmp$7];
                                }
                              } else {
                                tmp$6 = /* None */0;
                              }
                              return {
                                      id: tmp,
                                      draft: tmp$2,
                                      speakers: tmp$5,
                                      video_url: tmp$6
                                    };
                            } else {
                              throw [
                                    Graphql_error,
                                    "Object is not a value"
                                  ];
                            }
                          }));
                  } else {
                    throw [
                          Graphql_error,
                          "Expected array, got " + JSON.stringify(match$10)
                        ];
                  }
                } else {
                  throw [
                        Graphql_error,
                        "Field presentations on type EventilEvent is missing"
                      ];
                }
                tmp$3 = {
                  id: tmp$4,
                  presentations: tmp$6
                };
              } else {
                throw [
                      Graphql_error,
                      "Object is not a value"
                    ];
              }
              tmp$2 = /* Some */[tmp$3];
            }
          } else {
            tmp$2 = /* None */0;
          }
          tmp$1 = {
            event: tmp$2
          };
        } else {
          throw [
                Graphql_error,
                "Object is not a value"
              ];
        }
        tmp = /* Some */[tmp$1];
      }
    } else {
      tmp = /* None */0;
    }
    return {
            eventil: tmp
          };
  } else {
    throw [
          Graphql_error,
          "Object is not a value"
        ];
  }
}

function json_of_optional(encoder, value) {
  if (value) {
    return Curry._1(encoder, value[0]);
  } else {
    return null;
  }
}

function json_of_array(encoder, value) {
  return value.map(Curry.__1(encoder));
}

function json_of_String(value) {
  return value;
}

function make(id, _) {
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromList(/* :: */[
                /* tuple */[
                  "id",
                  id
                ],
                /* [] */0
              ]),
          parse: parse
        };
}

function makeWithVariables(variables) {
  var id = variables.id;
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromList(/* :: */[
                /* tuple */[
                  "id",
                  id
                ],
                /* [] */0
              ]),
          parse: parse
        };
}

function ret_type() {
  return /* module */[];
}

var MT_Ret = /* module */[];

var FindEventPresentationsQuery = /* module */[
  /* Graphql_error */Graphql_error,
  /* ppx_printed_query */ppx_printed_query,
  /* query */ppx_printed_query,
  /* parse */parse,
  /* json_of_optional */json_of_optional,
  /* json_of_array */json_of_array,
  /* json_of_String */json_of_String,
  /* make */make,
  /* makeWithVariables */makeWithVariables,
  /* ret_type */ret_type,
  /* MT_Ret */MT_Ret
];

var component = ReasonReact.reducerComponent("Event");

var Query = ReasonApollo.CreateQuery([
      ppx_printed_query,
      parse
    ]);

function make$1(eventId, _) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (self) {
              var videosQuery = make(eventId, /* () */0);
              return ReasonReact.element(/* None */0, /* None */0, Curry.app(Query[/* make */3], [
                              /* Some */[videosQuery.variables],
                              /* None */0,
                              /* None */0,
                              /* None */0,
                              /* None */0,
                              /* None */0,
                              /* None */0,
                              /* None */0,
                              /* None */0,
                              (function (param) {
                                  var result = param[/* result */0];
                                  if (typeof result === "number") {
                                    return React.createElement("div", undefined, Utils$ReactTemplate.s("Loading"));
                                  } else if (result.tag) {
                                    var match = result[0].eventil;
                                    if (match) {
                                      var match$1 = match[0].event;
                                      if (match$1) {
                                        var match$2 = self[/* state */1][/* selectedPresentation */2];
                                        var tmp;
                                        if (match$2) {
                                          var presentation = match$2[0];
                                          var term = presentationToQueryTerm(presentation);
                                          tmp = ReasonReact.element(/* None */0, /* None */0, Example$ReactTemplate.make(term, Utils$ReactTemplate.getExn("presentationId", presentation.id), /* array */[]));
                                        } else {
                                          tmp = null;
                                        }
                                        return React.createElement("div", undefined, React.createElement("ul", undefined, $$Array.map((function (presentation) {
                                                              var names = $$String.concat(" ", $$Array.to_list($$Array.map((function (speaker) {
                                                                              return $$default("", speaker.name);
                                                                            }), presentation.speakers)));
                                                              var match = presentation.video_url;
                                                              return React.createElement("li", {
                                                                          onClick: (function () {
                                                                              return Curry._1(self[/* send */3], /* SelectPresentation */[presentation]);
                                                                            })
                                                                        }, Utils$ReactTemplate.s((
                                                                              match ? "Y" : "X"
                                                                            ) + (" " + (names + (" : " + $$default("No title", presentation.draft.title))))));
                                                            }), match$1[0].presentations)), React.createElement("hr", undefined), tmp);
                                      } else {
                                        return Utils$ReactTemplate.s("No event");
                                      }
                                    } else {
                                      return Utils$ReactTemplate.s("No eventil");
                                    }
                                  } else {
                                    return React.createElement("div", undefined, Utils$ReactTemplate.s(Option$ReactTemplate.$$default("Some error", Js_primitive.undefined_to_opt(JSON.stringify(result[0])))));
                                  }
                                })
                            ]));
            }),
          /* initialState */(function () {
              return /* record */[
                      /* count */0,
                      /* show */false,
                      /* selectedPresentation : None */0
                    ];
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, state) {
              if (typeof action === "number") {
                if (action !== 0) {
                  return /* Update */Block.__(0, [/* record */[
                              /* count */state[/* count */0],
                              /* show */!state[/* show */1],
                              /* selectedPresentation */state[/* selectedPresentation */2]
                            ]]);
                } else {
                  return /* Update */Block.__(0, [/* record */[
                              /* count */state[/* count */0] + 1 | 0,
                              /* show */state[/* show */1],
                              /* selectedPresentation */state[/* selectedPresentation */2]
                            ]]);
                }
              } else {
                return /* Update */Block.__(0, [/* record */[
                            /* count */state[/* count */0],
                            /* show */state[/* show */1],
                            /* selectedPresentation : Some */[action[0]]
                          ]]);
              }
            }),
          /* subscriptions */component[/* subscriptions */13],
          /* jsElementWrapped */component[/* jsElementWrapped */14]
        ];
}

exports.$$default = $$default;
exports.default = $$default;
exports.__esModule = true;
exports.presentationToQueryTerm = presentationToQueryTerm;
exports.FindEventPresentationsQuery = FindEventPresentationsQuery;
exports.component = component;
exports.Query = Query;
exports.make = make$1;
/* component Not a pure module */
