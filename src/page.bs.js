// Generated by BUCKLESCRIPT VERSION 2.2.0, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var OnegraphAuth = require("onegraph-auth");
var Event$ReactTemplate = require("./event.bs.js");
var Utils$ReactTemplate = require("./utils.bs.js");
var Chrome$ReactTemplate = require("./chrome.bs.js");
var Config$ReactTemplate = require("./config.bs.js");

var component = ReasonReact.reducerComponent("Page");

function make(forcedVideoId, _) {
  var newrecord = component.slice();
  newrecord[/* didMount */4] = (function (self) {
      try {
        Chrome$ReactTemplate.Tabs[/* getActive */0]((function (activeTab) {
                console.log("Active tab:", activeTab);
                return Curry._1(self[/* send */4], /* SetUrl */Block.__(2, [Js_primitive.null_undefined_to_opt(activeTab.url)]));
              }));
      }
      catch (exn){
        if (forcedVideoId) {
          Curry._1(self[/* send */4], /* SetVideoId */Block.__(1, [forcedVideoId[0]]));
        }
        
      }
      self[/* state */2][/* googleAuth */1].isLoggedIn().then((function (isLoggedIn) {
              console.log("User is logged in to Google: ", isLoggedIn);
              var isLoggedIn$1 = +isLoggedIn;
              Curry._1(self[/* send */4], /* SetGoogleLoggedIn */Block.__(4, [isLoggedIn$1]));
              if (isLoggedIn$1 !== 0) {
                return Promise.resolve(isLoggedIn$1);
              } else {
                console.log("Forcing twitter login");
                return self[/* state */2][/* googleAuth */1].login().then((function () {
                              return self[/* state */2][/* googleAuth */1].isLoggedIn().then((function (isLoggedIn) {
                                            var isLoggedIn$1 = +isLoggedIn;
                                            console.log("User is logged in to google after login: ", isLoggedIn$1);
                                            Curry._1(self[/* send */4], /* SetGoogleLoggedIn */Block.__(4, [isLoggedIn$1]));
                                            return Promise.resolve(isLoggedIn$1);
                                          }));
                            }));
              }
            }));
      return /* NoUpdate */0;
    });
  newrecord[/* render */9] = (function (param) {
      var _send = param[/* send */4];
      var state = param[/* state */2];
      var match = state[/* failed */5];
      var match$1 = state[/* videoId */3];
      if (match !== 0) {
        return Utils$ReactTemplate.s("Not on a Youtube site");
      } else if (match$1) {
        return React.createElement("div", undefined, React.createElement("input", {
                        defaultValue: state[/* eventId */6],
                        type: "text",
                        onKeyDown: (function ($$event) {
                            if ($$event.keyCode === 13) {
                              $$event.preventDefault();
                              return Curry._1(_send, /* SetEventId */Block.__(0, [$$event.target.value]));
                            } else {
                              return /* () */0;
                            }
                          })
                      }), React.createElement("h1", undefined, Utils$ReactTemplate.s("PowerTiller")), ReasonReact.element(/* None */0, /* None */0, Event$ReactTemplate.make(state[/* eventId */6], /* array */[])));
      } else {
        return Utils$ReactTemplate.s("No video detected: " + Utils$ReactTemplate.$$default("unknown url", state[/* currentUrl */4]));
      }
    });
  newrecord[/* initialState */10] = (function () {
      return /* record */[
              /* githubAuth */new OnegraphAuth.default({
                    appId: Config$ReactTemplate.appId,
                    service: "github",
                    oauthFinishPath: "/src/popup.html",
                    oneGraphOrigin: "http://serve.onegraph.io:8082"
                  }),
              /* googleAuth */new OnegraphAuth.default({
                    appId: Config$ReactTemplate.appId,
                    service: "google",
                    oauthFinishPath: "/src/popup.html",
                    oneGraphOrigin: "http://serve.onegraph.io:8082"
                  }),
              /* twitterAuth */new OnegraphAuth.default({
                    appId: Config$ReactTemplate.appId,
                    service: "twitter",
                    oauthFinishPath: "/src/popup.html",
                    oneGraphOrigin: "http://serve.onegraph.io:8082"
                  }),
              /* videoId : None */0,
              /* currentUrl : None */0,
              /* failed : false */0,
              /* eventId */"nordic-js-2017",
              /* isGithubLoggedIn : false */0,
              /* isGoogleLoggedIn : false */0,
              /* isTwitterLoggedIn : false */0
            ];
    });
  newrecord[/* reducer */12] = (function (action, state) {
      if (typeof action === "number") {
        var newrecord = state.slice();
        return /* Update */Block.__(0, [(newrecord[/* failed */5] = /* true */1, newrecord)]);
      } else {
        switch (action.tag | 0) {
          case 0 : 
              var newrecord$1 = state.slice();
              return /* Update */Block.__(0, [(newrecord$1[/* eventId */6] = action[0], newrecord$1)]);
          case 1 : 
              var newrecord$2 = state.slice();
              return /* Update */Block.__(0, [(newrecord$2[/* videoId */3] = /* Some */[action[0]], newrecord$2)]);
          case 2 : 
              var url = action[0];
              if (url) {
                var url$1 = url[0];
                var match = url$1.match((/v=([a-zA-Z0-9-_]+)/));
                var videoId = match !== null ? /* Some */[Caml_array.caml_array_get(match, 1)] : /* None */0;
                var newrecord$3 = state.slice();
                return /* Update */Block.__(0, [(newrecord$3[/* videoId */3] = videoId, newrecord$3[/* currentUrl */4] = /* Some */[url$1], newrecord$3)]);
              } else {
                var newrecord$4 = state.slice();
                return /* Update */Block.__(0, [(newrecord$4[/* currentUrl */4] = /* None */0, newrecord$4)]);
              }
              break;
          case 3 : 
              var newrecord$5 = state.slice();
              return /* Update */Block.__(0, [(newrecord$5[/* isGithubLoggedIn */7] = action[0], newrecord$5)]);
          case 4 : 
              var newrecord$6 = state.slice();
              return /* Update */Block.__(0, [(newrecord$6[/* isGoogleLoggedIn */8] = action[0], newrecord$6)]);
          case 5 : 
              var newrecord$7 = state.slice();
              return /* Update */Block.__(0, [(newrecord$7[/* isTwitterLoggedIn */9] = action[0], newrecord$7)]);
          
        }
      }
    });
  return newrecord;
}

exports.component = component;
exports.make = make;
/* component Not a pure module */
