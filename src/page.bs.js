// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var Event$ReactTemplate = require("./event.bs.js");
var Utils$ReactTemplate = require("./utils.bs.js");
var Chrome$ReactTemplate = require("./chrome.bs.js");
var Client$ReactTemplate = require("./client.bs.js");

var component = ReasonReact.reducerComponent("Page");

function make(forcedVideoId, _) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */(function (self) {
              try {
                Chrome$ReactTemplate.Tabs[/* getActive */0]((function (activeTab) {
                        console.log("Active tab:", activeTab);
                        return Curry._1(self[/* send */3], /* SetUrl */Block.__(2, [Js_primitive.null_undefined_to_opt(activeTab.url)]));
                      }));
              }
              catch (exn){
                if (forcedVideoId) {
                  Curry._1(self[/* send */3], /* SetVideoId */Block.__(1, [forcedVideoId[0]]));
                }
                
              }
              self[/* state */1][/* oneAuth */0].isLoggedIn("youtube").then((function (isLoggedIn) {
                      console.log("User is logged in to YouTube: ", isLoggedIn);
                      Curry._1(self[/* send */3], /* SetGoogleLoggedIn */Block.__(5, [isLoggedIn]));
                      if (isLoggedIn) {
                        return Promise.resolve(isLoggedIn);
                      } else {
                        console.log("Forcing YouTube login");
                        return self[/* state */1][/* oneAuth */0].login("youtube").then((function () {
                                      return self[/* state */1][/* oneAuth */0].isLoggedIn("youtube").then((function (isLoggedIn) {
                                                    console.log("User is logged in to YouTube after login: ", isLoggedIn);
                                                    Curry._1(self[/* send */3], /* SetGoogleLoggedIn */Block.__(5, [isLoggedIn]));
                                                    return Promise.resolve(isLoggedIn);
                                                  }));
                                    }));
                      }
                    }));
              self[/* state */1][/* oneAuth */0].isLoggedIn("eventil").then((function (isLoggedIn) {
                      console.log("User is logged in to eventil: ", isLoggedIn);
                      Curry._1(self[/* send */3], /* SetEventilLoggedIn */Block.__(3, [isLoggedIn]));
                      if (isLoggedIn) {
                        return Promise.resolve(isLoggedIn);
                      } else {
                        console.log("Forcing Eventil login");
                        return self[/* state */1][/* oneAuth */0].login("eventil").then((function () {
                                      return self[/* state */1][/* oneAuth */0].isLoggedIn("eventil").then((function (isLoggedIn) {
                                                    console.log("User is logged in to eventil after login: ", isLoggedIn);
                                                    Curry._1(self[/* send */3], /* SetEventilLoggedIn */Block.__(3, [isLoggedIn]));
                                                    return Promise.resolve(isLoggedIn);
                                                  }));
                                    }));
                      }
                    }));
              return /* () */0;
            }),
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (param) {
              var _send = param[/* send */3];
              var state = param[/* state */1];
              var match = state[/* failed */3];
              var match$1 = state[/* videoId */1];
              if (match) {
                return Utils$ReactTemplate.s("Not on a Youtube site");
              } else if (match$1) {
                return React.createElement("div", undefined, React.createElement("input", {
                                defaultValue: state[/* eventId */4],
                                type: "text",
                                onKeyDown: (function ($$event) {
                                    if ($$event.keyCode === 13) {
                                      $$event.preventDefault();
                                      return Curry._1(_send, /* SetEventId */Block.__(0, [$$event.target.value]));
                                    } else {
                                      return /* () */0;
                                    }
                                  })
                              }), React.createElement("h1", undefined, Utils$ReactTemplate.s("PowerTiller")), React.createElement("p", undefined, "Logged into YouTube: " + Pervasives.string_of_bool(state[/* isYouTubeLoggedIn */7])), React.createElement("p", undefined, "Logged into Eventil: " + Pervasives.string_of_bool(state[/* isEventilLoggedIn */5])), ReasonReact.element(/* None */0, /* None */0, Event$ReactTemplate.make(state[/* eventId */4], /* array */[])));
              } else {
                return Utils$ReactTemplate.s("No video detected: " + Utils$ReactTemplate.$$default("unknown url", state[/* currentUrl */2]));
              }
            }),
          /* initialState */(function () {
              return /* record */[
                      /* oneAuth */Client$ReactTemplate.auth,
                      /* videoId : None */0,
                      /* currentUrl : None */0,
                      /* failed */false,
                      /* eventId */"nordic-js-2017",
                      /* isEventilLoggedIn */false,
                      /* isGithubLoggedIn */false,
                      /* isYouTubeLoggedIn */false,
                      /* isTwitterLoggedIn */false
                    ];
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, state) {
              if (typeof action === "number") {
                return /* Update */Block.__(0, [/* record */[
                            /* oneAuth */state[/* oneAuth */0],
                            /* videoId */state[/* videoId */1],
                            /* currentUrl */state[/* currentUrl */2],
                            /* failed */true,
                            /* eventId */state[/* eventId */4],
                            /* isEventilLoggedIn */state[/* isEventilLoggedIn */5],
                            /* isGithubLoggedIn */state[/* isGithubLoggedIn */6],
                            /* isYouTubeLoggedIn */state[/* isYouTubeLoggedIn */7],
                            /* isTwitterLoggedIn */state[/* isTwitterLoggedIn */8]
                          ]]);
              } else {
                switch (action.tag | 0) {
                  case 0 : 
                      return /* Update */Block.__(0, [/* record */[
                                  /* oneAuth */state[/* oneAuth */0],
                                  /* videoId */state[/* videoId */1],
                                  /* currentUrl */state[/* currentUrl */2],
                                  /* failed */state[/* failed */3],
                                  /* eventId */action[0],
                                  /* isEventilLoggedIn */state[/* isEventilLoggedIn */5],
                                  /* isGithubLoggedIn */state[/* isGithubLoggedIn */6],
                                  /* isYouTubeLoggedIn */state[/* isYouTubeLoggedIn */7],
                                  /* isTwitterLoggedIn */state[/* isTwitterLoggedIn */8]
                                ]]);
                  case 1 : 
                      return /* Update */Block.__(0, [/* record */[
                                  /* oneAuth */state[/* oneAuth */0],
                                  /* videoId : Some */[action[0]],
                                  /* currentUrl */state[/* currentUrl */2],
                                  /* failed */state[/* failed */3],
                                  /* eventId */state[/* eventId */4],
                                  /* isEventilLoggedIn */state[/* isEventilLoggedIn */5],
                                  /* isGithubLoggedIn */state[/* isGithubLoggedIn */6],
                                  /* isYouTubeLoggedIn */state[/* isYouTubeLoggedIn */7],
                                  /* isTwitterLoggedIn */state[/* isTwitterLoggedIn */8]
                                ]]);
                  case 2 : 
                      var url = action[0];
                      if (url) {
                        var url$1 = url[0];
                        var match = url$1.match((/v=([a-zA-Z0-9-_]+)/));
                        var videoId = match !== null ? /* Some */[Caml_array.caml_array_get(match, 1)] : /* None */0;
                        return /* Update */Block.__(0, [/* record */[
                                    /* oneAuth */state[/* oneAuth */0],
                                    /* videoId */videoId,
                                    /* currentUrl : Some */[url$1],
                                    /* failed */state[/* failed */3],
                                    /* eventId */state[/* eventId */4],
                                    /* isEventilLoggedIn */state[/* isEventilLoggedIn */5],
                                    /* isGithubLoggedIn */state[/* isGithubLoggedIn */6],
                                    /* isYouTubeLoggedIn */state[/* isYouTubeLoggedIn */7],
                                    /* isTwitterLoggedIn */state[/* isTwitterLoggedIn */8]
                                  ]]);
                      } else {
                        return /* Update */Block.__(0, [/* record */[
                                    /* oneAuth */state[/* oneAuth */0],
                                    /* videoId */state[/* videoId */1],
                                    /* currentUrl : None */0,
                                    /* failed */state[/* failed */3],
                                    /* eventId */state[/* eventId */4],
                                    /* isEventilLoggedIn */state[/* isEventilLoggedIn */5],
                                    /* isGithubLoggedIn */state[/* isGithubLoggedIn */6],
                                    /* isYouTubeLoggedIn */state[/* isYouTubeLoggedIn */7],
                                    /* isTwitterLoggedIn */state[/* isTwitterLoggedIn */8]
                                  ]]);
                      }
                  case 3 : 
                      return /* Update */Block.__(0, [/* record */[
                                  /* oneAuth */state[/* oneAuth */0],
                                  /* videoId */state[/* videoId */1],
                                  /* currentUrl */state[/* currentUrl */2],
                                  /* failed */state[/* failed */3],
                                  /* eventId */state[/* eventId */4],
                                  /* isEventilLoggedIn */action[0],
                                  /* isGithubLoggedIn */state[/* isGithubLoggedIn */6],
                                  /* isYouTubeLoggedIn */state[/* isYouTubeLoggedIn */7],
                                  /* isTwitterLoggedIn */state[/* isTwitterLoggedIn */8]
                                ]]);
                  case 4 : 
                      return /* Update */Block.__(0, [/* record */[
                                  /* oneAuth */state[/* oneAuth */0],
                                  /* videoId */state[/* videoId */1],
                                  /* currentUrl */state[/* currentUrl */2],
                                  /* failed */state[/* failed */3],
                                  /* eventId */state[/* eventId */4],
                                  /* isEventilLoggedIn */state[/* isEventilLoggedIn */5],
                                  /* isGithubLoggedIn */action[0],
                                  /* isYouTubeLoggedIn */state[/* isYouTubeLoggedIn */7],
                                  /* isTwitterLoggedIn */state[/* isTwitterLoggedIn */8]
                                ]]);
                  case 5 : 
                      return /* Update */Block.__(0, [/* record */[
                                  /* oneAuth */state[/* oneAuth */0],
                                  /* videoId */state[/* videoId */1],
                                  /* currentUrl */state[/* currentUrl */2],
                                  /* failed */state[/* failed */3],
                                  /* eventId */state[/* eventId */4],
                                  /* isEventilLoggedIn */state[/* isEventilLoggedIn */5],
                                  /* isGithubLoggedIn */state[/* isGithubLoggedIn */6],
                                  /* isYouTubeLoggedIn */action[0],
                                  /* isTwitterLoggedIn */state[/* isTwitterLoggedIn */8]
                                ]]);
                  case 6 : 
                      return /* Update */Block.__(0, [/* record */[
                                  /* oneAuth */state[/* oneAuth */0],
                                  /* videoId */state[/* videoId */1],
                                  /* currentUrl */state[/* currentUrl */2],
                                  /* failed */state[/* failed */3],
                                  /* eventId */state[/* eventId */4],
                                  /* isEventilLoggedIn */state[/* isEventilLoggedIn */5],
                                  /* isGithubLoggedIn */state[/* isGithubLoggedIn */6],
                                  /* isYouTubeLoggedIn */state[/* isYouTubeLoggedIn */7],
                                  /* isTwitterLoggedIn */action[0]
                                ]]);
                  
                }
              }
            }),
          /* subscriptions */component[/* subscriptions */13],
          /* jsElementWrapped */component[/* jsElementWrapped */14]
        ];
}

exports.component = component;
exports.make = make;
/* component Not a pure module */
