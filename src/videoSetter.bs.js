// Generated by BUCKLESCRIPT VERSION 2.2.0, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Utils$ReactTemplate = require("./utils.bs.js");
var Client$ReactTemplate = require("./client.bs.js");

var Graphql_error = Caml_exceptions.create("VideoSetter-ReactTemplate.SetPresentationVideoIdMutation.Graphql_error");

var query = "mutation setEventilPresentationVideoId($presentationId: String!, $youTubeVideoId: String!)  {\neventil  {\nsetVideoId(id: $presentationId, youtube_id: $youTubeVideoId)  {\ndraft  {\ntitle  \n}\n}\n}\n}";

function parse(value) {
  var match = Js_json.decodeObject(value);
  if (match) {
    var value$1 = match[0]["eventil"];
    var match$1 = Js_json.decodeNull(value$1);
    var tmp;
    if (match$1) {
      tmp = /* None */0;
    } else {
      var match$2 = Js_json.decodeObject(value$1);
      var tmp$1;
      if (match$2) {
        var value$2 = match$2[0]["setVideoId"];
        var match$3 = Js_json.decodeNull(value$2);
        var tmp$2;
        if (match$3) {
          tmp$2 = /* None */0;
        } else {
          var match$4 = Js_json.decodeObject(value$2);
          var tmp$3;
          if (match$4) {
            var value$3 = match$4[0]["draft"];
            var match$5 = Js_json.decodeObject(value$3);
            var tmp$4;
            if (match$5) {
              var value$4 = match$5[0]["title"];
              var match$6 = Js_json.decodeNull(value$4);
              var tmp$5;
              if (match$6) {
                tmp$5 = /* None */0;
              } else {
                var match$7 = Js_json.decodeString(value$4);
                var tmp$6;
                if (match$7) {
                  tmp$6 = match$7[0];
                } else {
                  throw Graphql_error;
                }
                tmp$5 = /* Some */[tmp$6];
              }
              tmp$4 = {
                title: tmp$5
              };
            } else {
              throw Graphql_error;
            }
            tmp$3 = {
              draft: tmp$4
            };
          } else {
            throw Graphql_error;
          }
          tmp$2 = /* Some */[tmp$3];
        }
        tmp$1 = {
          setVideoId: tmp$2
        };
      } else {
        throw Graphql_error;
      }
      tmp = /* Some */[tmp$1];
    }
    return {
            eventil: tmp
          };
  } else {
    throw Graphql_error;
  }
}

function json_of_optional(encoder, value) {
  if (value) {
    return Curry._1(encoder, value[0]);
  } else {
    return null;
  }
}

function json_of_array(encoder, value) {
  return value.map(Curry.__1(encoder));
}

function json_of_String(value) {
  return value;
}

function make(presentationId, youTubeVideoId, _) {
  return {
          query: query,
          variables: Js_dict.fromList(/* :: */[
                /* tuple */[
                  "presentationId",
                  presentationId
                ],
                /* :: */[
                  /* tuple */[
                    "youTubeVideoId",
                    youTubeVideoId
                  ],
                  /* [] */0
                ]
              ]),
          parse: parse
        };
}

function makeWithVariables(variables) {
  var presentationId = variables.presentationId;
  var youTubeVideoId = variables.youTubeVideoId;
  return {
          query: query,
          variables: Js_dict.fromList(/* :: */[
                /* tuple */[
                  "presentationId",
                  presentationId
                ],
                /* :: */[
                  /* tuple */[
                    "youTubeVideoId",
                    youTubeVideoId
                  ],
                  /* [] */0
                ]
              ]),
          parse: parse
        };
}

function ret_type() {
  return /* module */[];
}

var MT_Ret = /* module */[];

var SetPresentationVideoIdMutation = /* module */[
  /* Graphql_error */Graphql_error,
  /* query */query,
  /* parse */parse,
  /* json_of_optional */json_of_optional,
  /* json_of_array */json_of_array,
  /* json_of_String */json_of_String,
  /* make */make,
  /* makeWithVariables */makeWithVariables,
  /* ret_type */ret_type,
  /* MT_Ret */MT_Ret
];

var mutationComponent = ReasonReact.statelessComponent("VideoSetter");

function make$1(presentationId, videoId, _) {
  var newrecord = mutationComponent.slice();
  newrecord[/* render */9] = (function () {
      return ReasonReact.element(/* None */0, /* None */0, Curry._1(Client$ReactTemplate.Instance[/* Mutation */2][/* make */2], (function (mutate, result) {
                        if (typeof result === "number") {
                          if (result) {
                            return React.createElement("div", undefined, Utils$ReactTemplate.s("Loading mutation result"));
                          } else {
                            return React.createElement("div", undefined, React.createElement("button", {
                                            onClick: (function () {
                                                return Curry._1(mutate, make(presentationId, videoId, /* () */0));
                                              })
                                          }, Utils$ReactTemplate.s("Set this video")));
                          }
                        } else if (result.tag) {
                          return React.createElement("div", undefined, Utils$ReactTemplate.s(result[0]));
                        } else {
                          return React.createElement("div", undefined, Utils$ReactTemplate.s(Utils$ReactTemplate.$$default("Couldn't get result", Js_primitive.undefined_to_opt(JSON.stringify(result[0])))));
                        }
                      })));
    });
  return newrecord;
}

var Mutation = 0;

exports.SetPresentationVideoIdMutation = SetPresentationVideoIdMutation;
exports.mutationComponent = mutationComponent;
exports.Mutation = Mutation;
exports.make = make$1;
/* mutationComponent Not a pure module */
