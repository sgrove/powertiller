// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var ReasonApollo = require("reason-apollo/src/ReasonApollo.bs.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Utils$ReactTemplate = require("./utils.bs.js");
var Option$ReactTemplate = require("./option.bs.js");
var VideoSetter$ReactTemplate = require("./videoSetter.bs.js");
var VideoPreview$ReactTemplate = require("./videoPreview.bs.js");

function $$default(value, option) {
  if (option) {
    return option[0];
  } else {
    return value;
  }
}

var Graphql_error = Caml_exceptions.create("Example-ReactTemplate.FindPotentialVideosQuery.Graphql_error");

var ppx_printed_query = "query findPotentialVideos($q: String!)  {\nyouTubeSearch(q: $q, maxResults: 10)  {\nitems  {\nedges  {\nnode  {\nid  \nsnippet  {\ntitle  \ndescription  \n}\n}\n}\n}\n}\n}";

function parse(value) {
  var match = Js_json.decodeObject(value);
  if (match) {
    var match$1 = match[0]["youTubeSearch"];
    var tmp;
    if (match$1 !== undefined) {
      var match$2 = Js_json.decodeNull(match$1);
      if (match$2) {
        tmp = /* None */0;
      } else {
        var match$3 = Js_json.decodeObject(match$1);
        var tmp$1;
        if (match$3) {
          var match$4 = match$3[0]["items"];
          var tmp$2;
          if (match$4 !== undefined) {
            var match$5 = Js_json.decodeObject(match$4);
            if (match$5) {
              var match$6 = match$5[0]["edges"];
              var tmp$3;
              if (match$6 !== undefined) {
                var match$7 = Js_json.decodeArray(match$6);
                if (match$7) {
                  tmp$3 = match$7[0].map((function (value) {
                          var match = Js_json.decodeObject(value);
                          if (match) {
                            var match$1 = match[0]["node"];
                            var tmp;
                            if (match$1 !== undefined) {
                              var match$2 = Js_json.decodeObject(match$1);
                              if (match$2) {
                                var value$1 = match$2[0];
                                var match$3 = value$1["id"];
                                var tmp$1;
                                if (match$3 !== undefined) {
                                  var match$4 = Js_json.decodeString(match$3);
                                  if (match$4) {
                                    tmp$1 = match$4[0];
                                  } else {
                                    throw [
                                          Graphql_error,
                                          "Expected string, got " + JSON.stringify(match$3)
                                        ];
                                  }
                                } else {
                                  throw [
                                        Graphql_error,
                                        "Field id on type YoutubeSearchNode is missing"
                                      ];
                                }
                                var match$5 = value$1["snippet"];
                                var tmp$2;
                                if (match$5 !== undefined) {
                                  var match$6 = Js_json.decodeObject(match$5);
                                  if (match$6) {
                                    var value$2 = match$6[0];
                                    var match$7 = value$2["title"];
                                    var tmp$3;
                                    if (match$7 !== undefined) {
                                      var match$8 = Js_json.decodeString(match$7);
                                      if (match$8) {
                                        tmp$3 = match$8[0];
                                      } else {
                                        throw [
                                              Graphql_error,
                                              "Expected string, got " + JSON.stringify(match$7)
                                            ];
                                      }
                                    } else {
                                      throw [
                                            Graphql_error,
                                            "Field title on type YoutubeSearchNodeSnippet is missing"
                                          ];
                                    }
                                    var match$9 = value$2["description"];
                                    var tmp$4;
                                    if (match$9 !== undefined) {
                                      var match$10 = Js_json.decodeString(match$9);
                                      if (match$10) {
                                        tmp$4 = match$10[0];
                                      } else {
                                        throw [
                                              Graphql_error,
                                              "Expected string, got " + JSON.stringify(match$9)
                                            ];
                                      }
                                    } else {
                                      throw [
                                            Graphql_error,
                                            "Field description on type YoutubeSearchNodeSnippet is missing"
                                          ];
                                    }
                                    tmp$2 = {
                                      title: tmp$3,
                                      description: tmp$4
                                    };
                                  } else {
                                    throw [
                                          Graphql_error,
                                          "Object is not a value"
                                        ];
                                  }
                                } else {
                                  throw [
                                        Graphql_error,
                                        "Field snippet on type YoutubeSearchNode is missing"
                                      ];
                                }
                                tmp = {
                                  id: tmp$1,
                                  snippet: tmp$2
                                };
                              } else {
                                throw [
                                      Graphql_error,
                                      "Object is not a value"
                                    ];
                              }
                            } else {
                              throw [
                                    Graphql_error,
                                    "Field node on type YoutubeEdge is missing"
                                  ];
                            }
                            return {
                                    node: tmp
                                  };
                          } else {
                            throw [
                                  Graphql_error,
                                  "Object is not a value"
                                ];
                          }
                        }));
                } else {
                  throw [
                        Graphql_error,
                        "Expected array, got " + JSON.stringify(match$6)
                      ];
                }
              } else {
                throw [
                      Graphql_error,
                      "Field edges on type YoutubeVideoSearchItemContainer is missing"
                    ];
              }
              tmp$2 = {
                edges: tmp$3
              };
            } else {
              throw [
                    Graphql_error,
                    "Object is not a value"
                  ];
            }
          } else {
            throw [
                  Graphql_error,
                  "Field items on type YoutubeVideoSearchResult is missing"
                ];
          }
          tmp$1 = {
            items: tmp$2
          };
        } else {
          throw [
                Graphql_error,
                "Object is not a value"
              ];
        }
        tmp = /* Some */[tmp$1];
      }
    } else {
      tmp = /* None */0;
    }
    return {
            youTubeSearch: tmp
          };
  } else {
    throw [
          Graphql_error,
          "Object is not a value"
        ];
  }
}

function json_of_optional(encoder, value) {
  if (value) {
    return Curry._1(encoder, value[0]);
  } else {
    return null;
  }
}

function json_of_array(encoder, value) {
  return value.map(Curry.__1(encoder));
}

function json_of_String(value) {
  return value;
}

function make(q, _) {
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromList(/* :: */[
                /* tuple */[
                  "q",
                  q
                ],
                /* [] */0
              ]),
          parse: parse
        };
}

function makeWithVariables(variables) {
  var q = variables.q;
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromList(/* :: */[
                /* tuple */[
                  "q",
                  q
                ],
                /* [] */0
              ]),
          parse: parse
        };
}

function ret_type() {
  return /* module */[];
}

var MT_Ret = /* module */[];

var FindPotentialVideosQuery = /* module */[
  /* Graphql_error */Graphql_error,
  /* ppx_printed_query */ppx_printed_query,
  /* query */ppx_printed_query,
  /* parse */parse,
  /* json_of_optional */json_of_optional,
  /* json_of_array */json_of_array,
  /* json_of_String */json_of_String,
  /* make */make,
  /* makeWithVariables */makeWithVariables,
  /* ret_type */ret_type,
  /* MT_Ret */MT_Ret
];

var component = ReasonReact.reducerComponent("VideoSelector");

var Query = ReasonApollo.CreateQuery([
      ppx_printed_query,
      parse
    ]);

function make$1(term, presentationId, _) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (self) {
              console.log("term", term);
              var videosQuery = make(term, /* () */0);
              console.log("FPVQ", videosQuery);
              return ReasonReact.element(/* None */0, /* None */0, Curry.app(Query[/* make */3], [
                              /* Some */[videosQuery.variables],
                              /* None */0,
                              /* None */0,
                              /* None */0,
                              /* None */0,
                              /* None */0,
                              /* None */0,
                              /* None */0,
                              /* None */0,
                              (function (param) {
                                  var result = param[/* result */0];
                                  if (typeof result === "number") {
                                    return React.createElement("div", undefined, Utils$ReactTemplate.s("Loading"));
                                  } else if (result.tag) {
                                    var result$1 = result[0];
                                    var match = result$1.youTubeSearch;
                                    return React.createElement("div", undefined, React.createElement("pre", undefined, Utils$ReactTemplate.s($$default("Baffled....", Js_primitive.undefined_to_opt(JSON.stringify(result$1))))), React.createElement("ul", undefined, match ? $$Array.map((function (edge) {
                                                            var match = self[/* state */1][/* selectedVideo */2];
                                                            var tmp;
                                                            if (match) {
                                                              var selectedVideo = match[0];
                                                              tmp = selectedVideo.id === edge.node.id ? React.createElement("div", undefined, ReasonReact.element(/* None */0, /* None */0, VideoSetter$ReactTemplate.make(presentationId, selectedVideo.id, /* array */[])), ReasonReact.element(/* None */0, /* None */0, VideoPreview$ReactTemplate.make(selectedVideo.id, /* array */[]))) : null;
                                                            } else {
                                                              tmp = null;
                                                            }
                                                            return React.createElement("li", {
                                                                        onClick: (function () {
                                                                            return Curry._1(self[/* send */3], /* SelectSearchNode */[edge.node]);
                                                                          })
                                                                      }, Utils$ReactTemplate.s(edge.node.snippet.title + (" - " + edge.node.snippet.description)), tmp);
                                                          }), match[0].items.edges) : /* array */[Utils$ReactTemplate.s("No search results")]));
                                  } else {
                                    return React.createElement("div", undefined, Utils$ReactTemplate.s(Option$ReactTemplate.$$default("Some error", Js_primitive.undefined_to_opt(JSON.stringify(result[0])))));
                                  }
                                })
                            ]));
            }),
          /* initialState */(function () {
              return /* record */[
                      /* count */0,
                      /* show */false,
                      /* selectedVideo : None */0
                    ];
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, state) {
              if (typeof action === "number") {
                if (action !== 0) {
                  return /* Update */Block.__(0, [/* record */[
                              /* count */state[/* count */0],
                              /* show */!state[/* show */1],
                              /* selectedVideo */state[/* selectedVideo */2]
                            ]]);
                } else {
                  return /* Update */Block.__(0, [/* record */[
                              /* count */state[/* count */0] + 1 | 0,
                              /* show */state[/* show */1],
                              /* selectedVideo */state[/* selectedVideo */2]
                            ]]);
                }
              } else {
                return /* Update */Block.__(0, [/* record */[
                            /* count */state[/* count */0],
                            /* show */state[/* show */1],
                            /* selectedVideo : Some */[action[0]]
                          ]]);
              }
            }),
          /* subscriptions */component[/* subscriptions */13],
          /* jsElementWrapped */component[/* jsElementWrapped */14]
        ];
}

var RR = 0;

exports.RR = RR;
exports.$$default = $$default;
exports.default = $$default;
exports.__esModule = true;
exports.FindPotentialVideosQuery = FindPotentialVideosQuery;
exports.component = component;
exports.Query = Query;
exports.make = make$1;
/* component Not a pure module */
