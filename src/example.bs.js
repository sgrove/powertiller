// Generated by BUCKLESCRIPT VERSION 2.2.0, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Utils$ReactTemplate = require("./utils.bs.js");
var Client$ReactTemplate = require("./client.bs.js");
var VideoSetter$ReactTemplate = require("./videoSetter.bs.js");
var VideoPreview$ReactTemplate = require("./videoPreview.bs.js");

function $$default(value, option) {
  if (option) {
    return option[0];
  } else {
    return value;
  }
}

var Graphql_error = Caml_exceptions.create("Example-ReactTemplate.FindPotentialVideosQuery.Graphql_error");

var query = "query findPotentialVideos($q: String!)  {\nyouTubeSearch(q: $q, maxResults: 10)  {\nitems  {\nedges  {\nnode  {\nid  \nsnippet  {\ntitle  \ndescription  \n}\n}\n}\n}\n}\n}";

function parse(value) {
  var match = Js_json.decodeObject(value);
  if (match) {
    var value$1 = match[0]["youTubeSearch"];
    var match$1 = Js_json.decodeNull(value$1);
    var tmp;
    if (match$1) {
      tmp = /* None */0;
    } else {
      var match$2 = Js_json.decodeObject(value$1);
      var tmp$1;
      if (match$2) {
        var value$2 = match$2[0]["items"];
        var match$3 = Js_json.decodeObject(value$2);
        var tmp$2;
        if (match$3) {
          var value$3 = match$3[0]["edges"];
          var match$4 = Js_json.decodeArray(value$3);
          var tmp$3;
          if (match$4) {
            tmp$3 = match$4[0].map((function (value) {
                    var match = Js_json.decodeObject(value);
                    if (match) {
                      var value$1 = match[0]["node"];
                      var match$1 = Js_json.decodeObject(value$1);
                      var tmp;
                      if (match$1) {
                        var value$2 = match$1[0];
                        var value$3 = value$2["id"];
                        var match$2 = Js_json.decodeString(value$3);
                        var tmp$1;
                        if (match$2) {
                          tmp$1 = match$2[0];
                        } else {
                          throw Graphql_error;
                        }
                        var value$4 = value$2["snippet"];
                        var match$3 = Js_json.decodeObject(value$4);
                        var tmp$2;
                        if (match$3) {
                          var value$5 = match$3[0];
                          var value$6 = value$5["title"];
                          var match$4 = Js_json.decodeString(value$6);
                          var tmp$3;
                          if (match$4) {
                            tmp$3 = match$4[0];
                          } else {
                            throw Graphql_error;
                          }
                          var value$7 = value$5["description"];
                          var match$5 = Js_json.decodeString(value$7);
                          var tmp$4;
                          if (match$5) {
                            tmp$4 = match$5[0];
                          } else {
                            throw Graphql_error;
                          }
                          tmp$2 = {
                            title: tmp$3,
                            description: tmp$4
                          };
                        } else {
                          throw Graphql_error;
                        }
                        tmp = {
                          id: tmp$1,
                          snippet: tmp$2
                        };
                      } else {
                        throw Graphql_error;
                      }
                      return {
                              node: tmp
                            };
                    } else {
                      throw Graphql_error;
                    }
                  }));
          } else {
            throw Graphql_error;
          }
          tmp$2 = {
            edges: tmp$3
          };
        } else {
          throw Graphql_error;
        }
        tmp$1 = {
          items: tmp$2
        };
      } else {
        throw Graphql_error;
      }
      tmp = /* Some */[tmp$1];
    }
    return {
            youTubeSearch: tmp
          };
  } else {
    throw Graphql_error;
  }
}

function json_of_optional(encoder, value) {
  if (value) {
    return Curry._1(encoder, value[0]);
  } else {
    return null;
  }
}

function json_of_array(encoder, value) {
  return value.map(Curry.__1(encoder));
}

function json_of_String(value) {
  return value;
}

function make(q, _) {
  return {
          query: query,
          variables: Js_dict.fromList(/* :: */[
                /* tuple */[
                  "q",
                  q
                ],
                /* [] */0
              ]),
          parse: parse
        };
}

function makeWithVariables(variables) {
  var q = variables.q;
  return {
          query: query,
          variables: Js_dict.fromList(/* :: */[
                /* tuple */[
                  "q",
                  q
                ],
                /* [] */0
              ]),
          parse: parse
        };
}

function ret_type() {
  return /* module */[];
}

var MT_Ret = /* module */[];

var FindPotentialVideosQuery = /* module */[
  /* Graphql_error */Graphql_error,
  /* query */query,
  /* parse */parse,
  /* json_of_optional */json_of_optional,
  /* json_of_array */json_of_array,
  /* json_of_String */json_of_String,
  /* make */make,
  /* makeWithVariables */makeWithVariables,
  /* ret_type */ret_type,
  /* MT_Ret */MT_Ret
];

var component = ReasonReact.reducerComponent("VideoSelector");

function make$1(term, presentationId, _) {
  var newrecord = component.slice();
  newrecord[/* render */9] = (function (self) {
      console.log("term", term);
      var videosQuery = make(term, /* () */0);
      console.log("FPVQ", videosQuery);
      return ReasonReact.element(/* None */0, /* None */0, Curry._2(Client$ReactTemplate.Instance[/* Query */1][/* make */2], videosQuery, (function (response, parse) {
                        if (typeof response === "number") {
                          return React.createElement("div", undefined, Utils$ReactTemplate.s("Loading"));
                        } else if (response.tag) {
                          return React.createElement("div", undefined, Utils$ReactTemplate.s(response[0]));
                        } else {
                          var rawResult = response[0];
                          var result = Curry._1(parse, rawResult);
                          var match = result.youTubeSearch;
                          return React.createElement("div", undefined, React.createElement("pre", undefined, Utils$ReactTemplate.s($$default("Baffled....", Js_primitive.undefined_to_opt(JSON.stringify(rawResult))))), React.createElement("ul", undefined, match ? $$Array.map((function (edge) {
                                                  var match = self[/* state */2][/* selectedVideo */2];
                                                  var tmp;
                                                  if (match) {
                                                    var selectedVideo = match[0];
                                                    tmp = selectedVideo.id === edge.node.id ? React.createElement("div", undefined, ReasonReact.element(/* None */0, /* None */0, VideoSetter$ReactTemplate.make(presentationId, selectedVideo.id, /* array */[])), ReasonReact.element(/* None */0, /* None */0, VideoPreview$ReactTemplate.make(selectedVideo.id, /* array */[]))) : null;
                                                  } else {
                                                    tmp = null;
                                                  }
                                                  return React.createElement("li", {
                                                              onClick: (function () {
                                                                  return Curry._1(self[/* send */4], /* SelectSearchNode */[edge.node]);
                                                                })
                                                            }, Utils$ReactTemplate.s(edge.node.snippet.title + (" - " + edge.node.snippet.description)), tmp);
                                                }), match[0].items.edges) : /* array */[Utils$ReactTemplate.s("No search results")]));
                        }
                      })));
    });
  newrecord[/* initialState */10] = (function () {
      return /* record */[
              /* count */0,
              /* show : false */0,
              /* selectedVideo : None */0
            ];
    });
  newrecord[/* reducer */12] = (function (action, state) {
      if (typeof action === "number") {
        if (action !== 0) {
          return /* Update */Block.__(0, [/* record */[
                      /* count */state[/* count */0],
                      /* show */1 - state[/* show */1],
                      /* selectedVideo */state[/* selectedVideo */2]
                    ]]);
        } else {
          return /* Update */Block.__(0, [/* record */[
                      /* count */state[/* count */0] + 1 | 0,
                      /* show */state[/* show */1],
                      /* selectedVideo */state[/* selectedVideo */2]
                    ]]);
        }
      } else {
        return /* Update */Block.__(0, [/* record */[
                    /* count */state[/* count */0],
                    /* show */state[/* show */1],
                    /* selectedVideo : Some */[action[0]]
                  ]]);
      }
    });
  return newrecord;
}

var RR = 0;

var Query = 0;

exports.RR = RR;
exports.$$default = $$default;
exports.default = $$default;
exports.__esModule = true;
exports.FindPotentialVideosQuery = FindPotentialVideosQuery;
exports.component = component;
exports.Query = Query;
exports.make = make$1;
/* component Not a pure module */
